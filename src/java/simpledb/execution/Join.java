package simpledb.execution;

import simpledb.transaction.TransactionAbortedException;
import simpledb.common.DbException;
import simpledb.storage.Tuple;
import simpledb.storage.TupleDesc;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    private final JoinPredicate joinPredicate;
    private OpIterator leftOpIt;
    private OpIterator rightOpIt;
    private Tuple curLeftTuple;

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        // completed!
        this.joinPredicate = p;
        this.leftOpIt = child1;
        this.rightOpIt = child2;
    }

    public JoinPredicate getJoinPredicate() {
        // completed!
        return joinPredicate;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // completed!
        return leftOpIt.getTupleDesc().getFieldName(joinPredicate.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // completed!
        return rightOpIt.getTupleDesc().getFieldName(joinPredicate.getField2());
    }

    /**
     * @see TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // completed!
        return TupleDesc.merge(leftOpIt.getTupleDesc(), rightOpIt.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // completed!
        super.open();
        leftOpIt.open();
        rightOpIt.open();
        if(leftOpIt.hasNext()) curLeftTuple = leftOpIt.next();
    }

    public void close() {
        // completed!
        super.close();
        leftOpIt.close();
        rightOpIt.close();
        curLeftTuple = null;
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // completed!
        super.rewind();
        close();
        open();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // completed!
        while (curLeftTuple != null) {
            while (rightOpIt.hasNext()) {
                Tuple right = rightOpIt.next();
                if(joinPredicate.filter(curLeftTuple, right)) {
                    Tuple res = new Tuple(getTupleDesc());
                    int m = curLeftTuple.getTupleDesc().numFields();
                    int n = right.getTupleDesc().numFields();
                    for (int i = 0; i < m; i++) {
                        res.setField(i, curLeftTuple.getField(i));
                    }
                    for (int i = m; i < m + n; i++) {
                        res.setField(i, right.getField(i - m));
                    }
                    return res;
                }
            }
            curLeftTuple = null;
            if(leftOpIt.hasNext()) {
                curLeftTuple = leftOpIt.next();
                rightOpIt.rewind();
            } else {
                return null;
            }
        }
        return null;
    }

    @Override
    public OpIterator[] getChildren() {
        // completed!
        return new OpIterator[]{ leftOpIt, rightOpIt };
    }

    @Override
    public void setChildren(OpIterator[] children) {
        // completed!
        if(children.length != 2)
            throw new IllegalArgumentException("Join Operator must be two child");
        leftOpIt = children[0];
        rightOpIt = children[1];
    }
}
